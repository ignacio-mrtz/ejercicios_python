# Ejercicio 5.7. N칰meros perfectos y n칰meros amigos
# a) Escribir una funci칩n que devuelva la suma de todos los divisores de un n칰mero 洧녵, sin
# incluirlo.
# b) Usando la funci칩n anterior, escribir una funci칩n que imprima los primeros 洧녴 n칰meros
# tales que la suma de sus divisores sea igual a s칤 mismo (es decir los primeros 洧녴 n칰meros
# perfectos).
# c) Usando la primera funci칩n, escribir una funci칩n que imprima las primeras 洧녴 parejas
# de n칰meros (洧녩, 洧녪), tales que la suma de los divisores de 洧녩 es igual a 洧녪 y la suma de los
# divisores de 洧녪 es igual a 洧녩 (es decir las primeras 洧녴 parejas de n칰meros amigos).
# d) Proponer optimizaciones a las funciones anteriores para disminuir el tiempo de ejecuci칩n.

def suma_de_todos_sus_divisores(nro):
    sum=1
    for i in range(2,nro):
        if nro%i==0:
            sum+=i
    return sum

#print(suma_de_todos_sus_divisores(88))

def imprimir_primeros_m_nros_perfectos(m):
    i=1
    p=0
    while i<=m:
        if suma_de_todos_sus_divisores(p)==p:
            print(p)
            i+=1
        p+=1
    
#imprimir_primeros_m_nros_perfectos(5)#si pones mas de 5 no carga mas xq el sexto es 33 millones y algo

def imprimir_primeras_m_parejas_De_numeros_amigos(m):
    i=1
    a=1
    b=2
    while i<=m:
        if suma_de_todos_sus_divisores(a)==b and suma_de_todos_sus_divisores(b)==a:
            print("(",a,",",b,")")
            i+=1
            b+=1
        elif a<b-1:
            a+=1
        else:
            b+=1
            a=1



imprimir_primeras_m_parejas_De_numeros_amigos(1)




